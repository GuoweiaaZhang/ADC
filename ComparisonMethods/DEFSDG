"""
The implementation of this method is currently being organized and will be uploaded shortly. 
This is an unofficial reimplementation based on the paper:

Li, Xuegang, et al. "Domain expansion fusion single-domain generalization framework for mechanical fault diagnosis under unknown working conditions." 
Engineering Applications of Artificial Intelligence 138 (2024): 109380.

This implementation is provided for academic comparison only.
It may differ from the original code published by the authors.
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np

class PositionalEncoding(nn.Module):
    def __init__(self, d_model, max_len=5000):
        super(PositionalEncoding, self).__init__()
        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len).unsqueeze(1).float()
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-np.log(10000.0) / d_model))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        pe = pe.unsqueeze(0)  # shape: (1, max_len, d_model)
        self.register_buffer('pe', pe)

    def forward(self, x):
        x = x + self.pe[:, :x.size(1)]
        return x

class TransformerModel(nn.Module):
    def __init__(self, input_dim=1, d_model=64, nhead=8, num_layers=4, dim_feedforward=2048, dropout=0.1):
        super(TransformerModel, self).__init__()

        self.conv = nn.Conv1d(in_channels=input_dim, out_channels=d_model, kernel_size=25, stride=25)

        self.pos_encoding = PositionalEncoding(d_model)

        encoder_layer = nn.TransformerEncoderLayer(d_model=d_model, nhead=nhead,
                                                   dim_feedforward=dim_feedforward,
                                                   dropout=dropout, batch_first=True)
        self.transformer_encoder = nn.TransformerEncoder(encoder_layer, num_layers=num_layers)
        self.layer_norm = nn.LayerNorm(2560)
        self.fcc1 = nn.Linear(2560, 512)  
        self.fcc2 = nn.Linear(512, 256) 

    def forward(self, x):
        x = self.conv(x)
        x = x.permute(0, 2, 1)
        x = self.pos_encoding(x)
        x = self.transformer_encoder(x)
        x = x.view(x.size(0), -1)
        x=self.layer_norm (x)
        x=self.fcc1(x)
        out=self.fcc2(x)
        return out

class BasicBlock1D(nn.Module):
    def __init__(self, in_channels, out_channels, stride=1, downsample=None):
        super(BasicBlock1D, self).__init__()
        self.conv1 = nn.Conv1d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1, bias=False)
        self.bn1 = nn.BatchNorm1d(out_channels)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv1d(out_channels, out_channels, kernel_size=3, padding=1, bias=False)
        self.bn2 = nn.BatchNorm1d(out_channels)
        self.downsample = downsample

    def forward(self, x):
        identity = x
        if self.downsample is not None:
            identity = self.downsample(x)
        out = self.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        out += identity
        out = self.relu(out)
        return out

class ResNet1D(nn.Module):
    def __init__(self, in_channels=1, num_classes=256): 
        super(ResNet1D, self).__init__()
        self.conv1 = nn.Conv1d(in_channels, 64, kernel_size=7, stride=2, padding=3, bias=False)
        self.bn1 = nn.BatchNorm1d(64)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool1d(kernel_size=3, stride=2, padding=1)

       
        self.layer1 = self._make_layer(64, 64, blocks=2)
        self.layer2 = self._make_layer(64, 128, blocks=2, stride=2)
        self.layer3 = self._make_layer(128, 256, blocks=2, stride=2)
        self.layer4 = self._make_layer(256, 512, blocks=2, stride=2)

        self.avgpool = nn.AdaptiveAvgPool1d(1) 
        self.fc = nn.Linear(512, num_classes)  

    def _make_layer(self, in_channels, out_channels, blocks, stride=1):
        downsample = None
        if stride != 1 or in_channels != out_channels:
            downsample = nn.Sequential(
                nn.Conv1d(in_channels, out_channels, kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm1d(out_channels),
            )
        layers = [BasicBlock1D(in_channels, out_channels, stride, downsample)]
        for _ in range(1, blocks):
            layers.append(BasicBlock1D(out_channels, out_channels))
        return nn.Sequential(*layers)

    def forward(self, x):
        x = self.conv1(x)   
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)  

        x = self.layer1(x)  
        x = self.layer2(x)
        x = self.layer3(x)  
        x = self.layer4(x) 

        x = self.avgpool(x)  
        x = x.squeeze(-1)   
        out = self.fc(x)     
        return out

class FeatureExtractor(nn.Module):
    def __init__(self, in_channel):
        super().__init__()
        self.f_b1 = ResNet1D(in_channel)
        self.f_b2 = TransformerModel(in_channel)
        self.lam = 0.5  

    def forward(self, x):
        f_res = self.f_b1(x)
        f_tra = self.f_b2(x)
        f_out = self.lam * f_res + (1 - self.lam) * f_tra  # (B, feature_dim)

        return f_out

class SupConLoss(nn.Module):
    """Supervised Contrastive Learning: https://arxiv.org/pdf/2004.11362.pdf.
    It also supports the unsupervised contrastive loss in SimCLR"""
    def __init__(self, temperature=0.05, contrast_mode='all',
                 base_temperature=0.05):
        super(SupConLoss, self).__init__()
        self.temperature = temperature
        self.contrast_mode = contrast_mode
        self.base_temperature = base_temperature

    def forward(self, features, labels=None, mask=None):
        """Compute loss for model. If both `labels` and `mask` are None,
        it degenerates to SimCLR unsupervised loss:
        https://arxiv.org/pdf/2002.05709.pdf
        Args:
            features: hidden vector of shape [bsz, n_views, ...].
            labels: ground truth of shape [bsz].
            mask: contrastive mask of shape [bsz, bsz], mask_{i,j}=1 if sample j
                has the same class as sample i. Can be asymmetric.
        Returns:
            A loss scalar.
        """
        device = (torch.device('cuda')
                  if features.is_cuda
                  else torch.device('cpu'))

        if len(features.shape) < 3:
            raise ValueError('`features` needs to be [bsz, n_views, ...],'
                             'at least 3 dimensions are required')
        if len(features.shape) > 3:
            features = features.view(features.shape[0], features.shape[1], -1)

        batch_size = features.shape[0]
        if labels is not None and mask is not None:
            raise ValueError('Cannot define both `labels` and `mask`')
        elif labels is None and mask is None:
            mask = torch.eye(batch_size, dtype=torch.float32).to(device)
        elif labels is not None:
            labels = labels.contiguous().view(-1, 1)
            if labels.shape[0] != batch_size:
                raise ValueError('Num of labels does not match num of features')
            mask = torch.eq(labels, labels.T).float().to(device)
        else:
            mask = mask.float().to(device)

        contrast_count = features.shape[1]
        contrast_feature = torch.cat(torch.unbind(features, dim=1), dim=0)
        if self.contrast_mode == 'one':
            anchor_feature = features[:, 0]
            anchor_count = 1
        elif self.contrast_mode == 'all':
            anchor_feature = contrast_feature
            anchor_count = contrast_count
        else:
            raise ValueError('Unknown mode: {}'.format(self.contrast_mode))

        # compute logits
        anchor_dot_contrast = torch.div(
            torch.matmul(anchor_feature, contrast_feature.T),
            self.temperature)
        # for numerical stability
        logits_max, _ = torch.max(anchor_dot_contrast, dim=1, keepdim=True)
        logits = anchor_dot_contrast - logits_max.detach()

        # tile mask
        mask = mask.repeat(anchor_count, contrast_count)
        # mask-out self-contrast cases
        logits_mask = torch.scatter(
            torch.ones_like(mask),
            1,
            torch.arange(batch_size * anchor_count).view(-1, 1).to(device),
            0
        )
        mask = mask * logits_mask

        # compute log_prob
        exp_logits = torch.exp(logits) * logits_mask
        log_prob = logits - torch.log(exp_logits.sum(1, keepdim=True))

        # compute mean of log-likelihood over positive
        mean_log_prob_pos = (mask * log_prob).sum(1) / mask.sum(1)

        # loss
        loss = - (self.temperature / self.base_temperature) * mean_log_prob_pos
        loss = loss.view(anchor_count, batch_size).mean()

        return loss
class Multi_class(nn.Module):
    def __init__(self, in_channels=256, num_classes=10):  
        super(Multi_class, self).__init__()
        self.class1=nn.Linear(in_channels,num_classes)
        self.class2=nn.Linear(in_channels,num_classes)
        self.class3=nn.Linear(in_channels,num_classes)
        self.class4=nn.Linear(in_channels,num_classes)
    def forward(self, x):
        predict_1 = self.class1(x)
        predict_2 = self.class2(x)
        predict_3 = self.class3(x)
        predict_4 = self.class4(x)
        return predict_1,predict_2,predict_3,predict_4
class predictor(nn.Module):
    def __init__(self, in_channels=256, num_classes=10):  
        super(predictor, self).__init__()
        self.p=nn.Linear(in_channels,num_classes)
    def forward(self, x):
        predict = self.p(x)
        return predict
class SVAE(nn.Module):
    def __init__(self, input_dim=1024, hidden_dim=128, num_layers=1, bidirectional=False):
        super(SVAE, self).__init__()
        self.input_dim = input_dim
        self.hidden_dim = hidden_dim
        self.num_layers = num_layers
        self.bidirectional = bidirectional

      
        self.encoder_lstm = nn.LSTM(
            input_size=1,
            hidden_size=hidden_dim,
            num_layers=num_layers,
            bidirectional=bidirectional,
            batch_first=True
        )
        self.fc_mu = nn.Linear(hidden_dim, hidden_dim)
        self.fc_logvar = nn.Linear(hidden_dim, hidden_dim)

        self.decoder_lstm = nn.LSTM(
            input_size=hidden_dim,
            hidden_size=128,
            batch_first=True
        )
        self.decoder_fc = nn.Linear(128, input_dim)

    def reparameterize(self, mu, logvar):
        std = torch.exp(0.5 * logvar)
        eps = torch.randn_like(std)
        return mu + eps * std

    def svae_forward(self, x):

        x = x.permute(0, 2, 1)
        self.encoder_lstm.flatten_parameters()
        _, (h_n, _) = self.encoder_lstm(x)  # h_n: (num_layers, B, hidden_dim)

        h_n = h_n[-1]  # (B, hidden_dim)

        mu = self.fc_mu(h_n)
        logvar = self.fc_logvar(h_n)
        z = self.reparameterize(mu, logvar)  # (B, hidden_dim)

        z = z.unsqueeze(1)  # (B, 1, hidden_dim)
        decoded, _ = self.decoder_lstm(z)    # (B, 1, 128)
        x_recon = self.decoder_fc(decoded.squeeze(1))  # (B, 1024)
        x_recon = x_recon.unsqueeze(1)  # (B, 1, 1024)

        return x_recon, mu, logvar

    def forward(self, x):
        # x: (B, 1, 1024)
        x_e, mu, logvar = self.svae_forward(x)
        omega = torch.rand(x.size(0), 1, 1, device=x.device)  # (B, 1, 1)
        x_b = omega * x + (1 - omega) * x_e  # domain blending
        return x_b, x_e

class DEFSDG_model(nn.Module):
    def __init__(self, in_channel, num_classes):
        super().__init__()
        self.f = FeatureExtractor(in_channel=in_channel)
        self.c = Multi_class(num_classes=num_classes)
        self.p = predictor(num_classes=num_classes)

    def forward(self, x):
        f = self.f(x)
        p = self.p(f)
        predict_1, predict_2, predict_3, predict_4 = self.c(f)

        pred1 = torch.argmax(predict_1, dim=1)
        pred2 = torch.argmax(predict_2, dim=1)
        pred3 = torch.argmax(predict_3, dim=1)
        pred4 = torch.argmax(predict_4, dim=1)

        all_preds = torch.stack([pred1, pred2, pred3, pred4], dim=1) 
        final_preds = torch.mode(all_preds, dim=1).values            

        return predict_1, predict_2, predict_3, predict_4, final_preds,p
