"""
The implementation of this method is currently being organized and will be uploaded shortly. 
This is an unofficial reimplementation based on the paper:

Zhao, Chao, and Weiming Shen. "Adversarial mutual information-guided single domain generalization network for intelligent fault diagnosis." 
IEEE Transactions on Industrial Informatics 19.3 (2022): 2909-2918.

This implementation is provided for academic comparison only.
It may differ from the original code published by the authors.
"""
class FSupConLoss(nn.Module):

    def __init__(self, temperature=0.07, contrast_mode='all',
                 base_temperature=0.07):
        super(FSupConLoss, self).__init__()
        self.temperature = temperature            
        self.contrast_mode = contrast_mode       
        self.base_temperature = base_temperature  

    def forward(self, features, labels=None, mask=None):

        device = torch.device('cuda') if features.is_cuda else torch.device('cpu')

      
        if len(features.shape) < 3:
            raise ValueError('`features` needs to be [bsz, n_views, ...], at least 3 dimensions are required')
       
        if len(features.shape) > 3:
            features = features.view(features.shape[0], features.shape[1], -1)

        batch_size = features.shape[0]

       
        if labels is not None and mask is not None:
            raise ValueError('Cannot define both `labels` and `mask`')
        elif labels is None and mask is None:
           
            mask = torch.eye(batch_size, dtype=torch.float32).to(device)
        elif labels is not None:
            
            labels = labels.contiguous().view(-1, 1)
            if labels.shape[0] != batch_size:
                raise ValueError('Num of labels does not match num of features')
            mask = torch.eq(labels, labels.T).float().to(device)
        else:
            mask = mask.float().to(device)

        contrast_count = features.shape[1]
       
        contrast_feature = torch.cat(torch.unbind(features, dim=1), dim=0)

       
        if self.contrast_mode == 'one':
            anchor_feature = features[:, 0]
            anchor_count = 1
        elif self.contrast_mode == 'all':
            anchor_feature = contrast_feature
            anchor_count = contrast_count
        else:
            raise ValueError('Unknown mode: {}'.format(self.contrast_mode))

    
        anchor_dot_contrast = torch.div(
            torch.matmul(anchor_feature, contrast_feature.T),
            self.temperature)
  
        logits_max, _ = torch.max(anchor_dot_contrast, dim=1, keepdim=True)
        logits = anchor_dot_contrast - logits_max.detach()

      
        mask = mask.repeat(anchor_count, contrast_count)

       
        logits_mask = torch.scatter(
            torch.ones_like(mask),
            1,
            torch.arange(batch_size * anchor_count).view(-1, 1).to(device),
            0
        )
        mask = mask * logits_mask

      
      
        sample_ids = torch.arange(batch_size).to(device) 
        sample_ids = sample_ids.unsqueeze(1).repeat(1, contrast_count).view(-1)  
    
        sample_ids_anchor = sample_ids.unsqueeze(0)  
        sample_ids_all = sample_ids.unsqueeze(1)      
        same_sample_mask = (sample_ids_anchor == sample_ids_all).float()
    
        mask = mask * (1 - same_sample_mask)
    
        exp_logits = torch.exp(logits) * logits_mask
       
        log_prob = logits - torch.log(exp_logits.sum(1, keepdim=True))
      
        mean_log_prob_pos = (mask * log_prob).sum(1) / mask.sum(1)
   
        loss = - (self.temperature / self.base_temperature) * mean_log_prob_pos
        loss = loss.view(anchor_count, batch_size).mean()

        return loss

class FocalLoss(nn.Module):
    r"""
        This criterion is a implemenation of Focal Loss, which is proposed in
        Focal Loss for Dense Object Detection.

            Loss(x, class) = - \alpha (1-softmax(x)[class])^gamma \log(softmax(x)[class])

        The losses are averaged across observations for each minibatch.
        Args:
            alpha(1D Tensor, Variable) : the scalar factor for this criterion
            gamma(float, double) : gamma > 0; reduces the relative loss for well-classiﬁed examples (p > .5),
                                   putting more focus on hard, misclassiﬁed examples
            size_average(bool): size_average(bool): By default, the losses are averaged over observations for each minibatch.
                                However, if the field size_average is set to False, the losses are
                                instead summed for each minibatch.
    """

    def __init__(self, class_num=9, alpha=None, gamma=2, size_average=True):
        super(FocalLoss, self).__init__()
        if alpha is None:
            self.alpha = Variable(torch.ones(class_num, 1))
        else:
            if isinstance(alpha, Variable):
                self.alpha = alpha
            else:
                self.alpha = Variable(alpha)
        self.gamma = gamma
        self.class_num = class_num
        self.size_average = size_average

    def forward(self, inputs, targets):  # input shape (N,C); target shape (N, )
        N = inputs.size(0)  # batch大小
        C = inputs.size(1) 
        P = F.softmax(inputs, dim=1)

        class_mask = inputs.data.new(N, C).fill_(0) 
        class_mask = Variable(class_mask)
        ids = targets.view(-1, 1)  # ids shape (N,1)
        class_mask.scatter_(1, ids.data, 1.)  

        if inputs.is_cuda and not self.alpha.is_cuda:
            self.alpha = self.alpha.cuda()
        alpha = self.alpha[ids.data.view(-1)]  # alpha shape (N, 1) 全1

        probs = (P * class_mask).sum(1).view(-1, 1)
        log_p = probs.log()

        batch_loss = -1.0 * (torch.pow((1 - probs), self.gamma)) * log_p

        # print('-----bacth_loss------')
        # print(batch_loss)

        if self.size_average:
            loss = batch_loss.mean()
        else:
            loss = batch_loss.sum()

        return  loss

class SupConLoss(nn.Module):
    """Supervised Contrastive Learning: https://arxiv.org/pdf/2004.11362.pdf.
    It also supports the unsupervised contrastive loss in SimCLR"""
    def __init__(self, temperature=0.07, contrast_mode='all',
                 base_temperature=0.07):
        super(SupConLoss, self).__init__()
        self.temperature = temperature
        self.contrast_mode = contrast_mode
        self.base_temperature = base_temperature

    def forward(self, features, labels=None, mask=None):
        """Compute loss for model. If both `labels` and `mask` are None,
        it degenerates to SimCLR unsupervised loss:
        https://arxiv.org/pdf/2002.05709.pdf
        Args:
            features: hidden vector of shape [bsz, n_views, ...].
            labels: ground truth of shape [bsz].
            mask: contrastive mask of shape [bsz, bsz], mask_{i,j}=1 if sample j
                has the same class as sample i. Can be asymmetric.
        Returns:
            A loss scalar.
        """
        device = (torch.device('cuda')
                  if features.is_cuda
                  else torch.device('cpu'))

        if len(features.shape) < 3:
            raise ValueError('`features` needs to be [bsz, n_views, ...],'
                             'at least 3 dimensions are required')
        if len(features.shape) > 3:
            features = features.view(features.shape[0], features.shape[1], -1)

        batch_size = features.shape[0]
        if labels is not None and mask is not None:
            raise ValueError('Cannot define both `labels` and `mask`')
        elif labels is None and mask is None:
            mask = torch.eye(batch_size, dtype=torch.float32).to(device)
        elif labels is not None:
            labels = labels.contiguous().view(-1, 1)
            if labels.shape[0] != batch_size:
                raise ValueError('Num of labels does not match num of features')
            mask = torch.eq(labels, labels.T).float().to(device)
        else:
            mask = mask.float().to(device)

        contrast_count = features.shape[1]
        contrast_feature = torch.cat(torch.unbind(features, dim=1), dim=0)
        if self.contrast_mode == 'one':
            anchor_feature = features[:, 0]
            anchor_count = 1
        elif self.contrast_mode == 'all':
            anchor_feature = contrast_feature
            anchor_count = contrast_count
        else:
            raise ValueError('Unknown mode: {}'.format(self.contrast_mode))

        # compute logits
        anchor_dot_contrast = torch.div(
            torch.matmul(anchor_feature, contrast_feature.T),
            self.temperature)
        # for numerical stability
        logits_max, _ = torch.max(anchor_dot_contrast, dim=1, keepdim=True)
        logits = anchor_dot_contrast - logits_max.detach()

        # tile mask
        mask = mask.repeat(anchor_count, contrast_count)
        # mask-out self-contrast cases
        logits_mask = torch.scatter(
            torch.ones_like(mask),
            1,
            torch.arange(batch_size * anchor_count).view(-1, 1).to(device),
            0
        )
        mask = mask * logits_mask

        # compute log_prob
        exp_logits = torch.exp(logits) * logits_mask
        log_prob = logits - torch.log(exp_logits.sum(1, keepdim=True))

        # compute mean of log-likelihood over positive
        mean_log_prob_pos = (mask * log_prob).sum(1) / mask.sum(1)

        # loss
        loss = - (self.temperature / self.base_temperature) * mean_log_prob_pos
        loss = loss.view(anchor_count, batch_size).mean()

        return loss
class SConv_1D(nn.Module):
    def __init__(self, in_ch, out_ch, kernel):
        super(SConv_1D, self).__init__()

        self.conv = nn.Sequential(
            nn.Conv1d(in_ch, out_ch, kernel,stride=2),
            nn.BatchNorm1d(out_ch),
            nn.ReLU(inplace=True),
        )

    def forward(self, x):
        return self.conv(x)

class FeatureExtractor(nn.Module):
    def __init__(self, in_channel=1, num_classes=0, lr=0.1):
        super(FeatureExtractor, self).__init__()
        num_c=16
   
        self.conv1 = SConv_1D(1, num_c, 3, )
        self.conv2 = SConv_1D(num_c,  num_c*2, 3,)
        self.conv3 = SConv_1D(num_c*2, num_c*4, 3, )
        self.conv4 = SConv_1D(num_c*4, num_c*8, 3, )
        self.conv5 = SConv_1D(num_c*8, num_c*16, 3, )

    
        self.avg_pool = nn.AdaptiveAvgPool1d(1)
        self.fc_1 = nn.Linear(num_c*16, num_classes)
        self.fc_2 = nn.Linear(num_c*16, num_classes)
        self.fc_3 = nn.Linear(num_c*16, num_classes)
        self.fc_4 = nn.Linear(num_c*16, num_classes)
        self.p_logvar = nn.Sequential(nn.Linear(256, 128),
                                      nn.ReLU(),nn.Linear(128, 128),
                                      nn.ReLU())
    def forward(self, input,train="True"):
        x1 = self.conv1(input)
        x2 = self.conv2(x1)
        x3 = self.conv3(x2)
        x4 = self.conv4(x3)
        x5 = self.conv5(x4)

        x = self.avg_pool(x5)
        x = x.view(x.size(0), -1)

        logvar = self.p_logvar(x)
        x = self.fc_1(x)

        return x, logvar
def reparametrize(mu, logvar, factor=0.2):
    std = logvar.div(2).exp()
    eps = std.data.new(std.size()).normal_()
    return mu + factor*std*eps
def loglikeli(mu, logvar, y_samples):
    return (-(mu - y_samples)**2 /logvar.exp()-logvar).mean()#.sum(dim=1).mean(dim=0)
def club(mu, logvar, y_samples):

    sample_size = y_samples.shape[0]
    # random_index = torch.randint(sample_size, (sample_size,)).long()
    random_index = torch.randperm(sample_size).long()

    positive = - (mu - y_samples) ** 2 / logvar.exp()
    negative = - (mu - y_samples[random_index]) ** 2 / logvar.exp()
    upper_bound = (positive.sum(dim=-1) - negative.sum(dim=-1)).mean()
    return upper_bound / 2.


def focal(inputs, targets, gamma=2, reduction='mean'):

    logpt = F.log_softmax(inputs, dim=1)
 
    logpt = logpt.gather(dim=1, index=targets.unsqueeze(1))
    logpt = logpt.view(-1)
 
    pt = logpt.exp()

    loss = -((1 - pt) ** gamma) * logpt

    if reduction == 'mean':
        return loss.mean()
    elif reduction == 'sum':
        return loss.sum()
    else:
        return loss
